{"version":3,"file":"static/js/575.50f22932.chunk.js","mappings":"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","sources":["componets/Users/UserProfile/UserProfile.tsx","componets/common/Pagination/Pagination.tsx","redux/selectors/usersSelectors.ts","componets/Users/UsersSearchForm/UsersSearchForm.tsx","componets/Users/Users.tsx","componets/Users/UsersPage.tsx"],"sourcesContent":["import './UserProfile.css'\nimport userAvatar from '../../../img/userAvatar.jpeg'\nimport { NavLink } from 'react-router-dom'\nimport { FC } from 'react'\nimport { UserDataType } from '../../../Types/Types'\n\ntype PropsType = {\n  user: UserDataType\n  followingInProgress: number[]\n  follow: (userId: number) => void\n  unfollow: (userId: number) => void\n}\n\nconst UserProfile: FC<PropsType> = ({\n  user: { id, photos, followed, name, status },\n  followingInProgress,\n  unfollow,\n  follow,\n}) => {\n  return (\n    <div className='friends-profile__wrapper'>\n      <div className='friends-profile__item'>\n        <NavLink to={'/Profile/' + id}>\n          <img\n            src={photos.small != null ? photos.small : userAvatar}\n            className='friends-profile__item__img'\n            alt='avatar'\n          />\n        </NavLink>\n        {followed ? (\n          <button\n            disabled={followingInProgress.some((iD) => iD === id)}\n            onClick={() => {\n              unfollow(id)\n            }}\n            className='friends-profile__item__btn btn'\n          >\n            Unfollow\n          </button>\n        ) : (\n          <button\n            disabled={followingInProgress.some((iD) => iD === id)}\n            onClick={() => {\n              follow(id)\n            }}\n            className='friends-profile__item__btn btn'\n          >\n            Follow\n          </button>\n        )}\n      </div>\n      <div className='friends-profile__info'>\n        <div className='friends-profile__info__leftSide'>\n          <p className='friends-profile__info__leftSide__name'>{name}</p>\n          <p className='friends-profile__info__leftSide__status'>\n            {status != null\n              ? status\n              : 'Hi guys! Tomorrow I will be boarding, who is with me?'}\n          </p>\n        </div>\n        <div className='friends-profile__info__rightSide'>\n          <p className='friends-profile__info__rightSide__country'>Ukrain</p>\n          <p className='friends-profile__info__rightSide__town'>Kiev</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UserProfile\n","import './Pagination.css'\nimport { FC } from 'react'\n\ntype PropsType = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  halfPortionSize?: number\n  onPageChanged: (page: number) => void\n}\n\nconst Pagination: FC<PropsType> = ({\n  totalItemsCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  halfPortionSize = 5,\n}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n  let pages: number[] = []\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i)\n  }\n\n  let curP = currentPage\n  let curPF = curP - halfPortionSize < 0 ? 0 : curP - halfPortionSize\n  let curPL = curP + halfPortionSize\n  let slicedPages = pages.slice(curPF, curPL)\n\n  return (\n    <div className='pagination'>\n      {slicedPages.map((page) => {\n        return (\n          <div className='pagination__page' key={page}>\n            <span\n              key={page}\n              className={currentPage === page ? 'selected_page' : ''}\n              onClick={(e) => {\n                onPageChanged(page)\n              }}\n            >\n              {page}\n            </span>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Pagination\n","//import { createSelector } from 'reselect';\n\nimport { AppStateType } from \"../redux-store\"\n\nexport const getUsers = (state: AppStateType) => {\n  return state.usersPage.usersData\n}\n\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n  return state.usersPage.totalUsersCount\n}\n\nexport const getcurrentPage = (state: AppStateType) => {\n  return state.usersPage.setCurrentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n  return state.usersPage.filter\n}\n\n// example hard selector created by reselect\n/* export const getUsersSuperSelector = createSelector(\n  getUsers,\n  getIsFetching,\n  (users, isFetching) => {\n    return users.filter((u) => true);\n  }\n);\n */\n","import { Formik, Form, Field } from 'formik'\nimport { FC, memo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getUsersFilter } from '../../../redux/selectors/usersSelectors'\nimport { UsersFilterType } from '../../../Types/Types'\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {}\n  return errors\n}\n\ntype FormType = {\n  term: string\n  friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n  onFilterChanged: (filter: UsersFilterType) => void\n}\n\nconst UsersSearchForm: FC<PropsType> = memo((props) => {\n  const filterS = useSelector(getUsersFilter)\n\n  const submit = (\n    values: FormType,\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\n  ) => {\n    const filter: UsersFilterType = {\n      term: values.term,\n      friend:\n        values.friend === 'null'\n          ? null\n          : values.friend === 'true'\n          ? true\n          : false,\n    }\n    setTimeout(() => {\n      props.onFilterChanged(filter)\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <div>\n      <Formik\n        enableReinitialize\n        initialValues={\n          { term: filterS.term, friend: String(filterS.friend) } as FormType\n        }\n        validate={usersSearchFormValidate}\n        onSubmit={submit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Field type='text' name='term' />\n            <Field name='friend' as='select'>\n              <option value='null'>All</option>\n              <option value='true'>Only followed</option>\n              <option value='false'>Only unfollowed</option>\n            </Field>\n            <button type='submit' disabled={isSubmitting}>\n              Find\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  )\n})\n\nexport default UsersSearchForm\n","import './Users.css'\nimport UserProfile from './UserProfile/UserProfile'\nimport Pagination from '../common/Pagination/Pagination'\nimport { FC, memo } from 'react'\nimport { UserDataType, UsersFilterType } from '../../Types/Types'\nimport UsersSearchForm from './UsersSearchForm/UsersSearchForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getFollowingInProgress,\n  getTotalUsersCount,\n  getUsers,\n} from '../../redux/selectors/usersSelectors'\nimport {\n  getFollow,\n  getUnfollow,\n  requestUsers,\n} from '../../redux/reducers/usersReduser'\n\ntype PropsType = {\n  currentPage: number\n  pageSize: number\n  filter: UsersFilterType\n}\n\nconst Users: FC<PropsType> = memo(({ currentPage, pageSize, filter }) => {\n  const users = useSelector(getUsers)\n  const totalUsersCount = useSelector(getTotalUsersCount)\n  const followingInProgress = useSelector(getFollowingInProgress)\n\n  const dispatch = useDispatch()\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(requestUsers(pageNumber, pageSize, filter) as any)\n  }\n\n  const onFilterChanged = (filter: UsersFilterType) => {\n    dispatch(requestUsers(1, pageSize, filter) as any)\n  }\n\n  const follow = (userId: number) => {\n    dispatch(getFollow(userId) as any)\n  }\n\n  const unfollow = (userId: number) => {\n    dispatch(getUnfollow(userId) as any)\n  }\n\n  let userProfileElement = users.map((profile: UserDataType) => (\n    <UserProfile\n      user={profile}\n      key={profile.id}\n      follow={follow}\n      unfollow={unfollow}\n      followingInProgress={followingInProgress}\n    />\n  ))\n\n  return (\n    <div className='find-friends'>\n      <h2 className='main-page__h2'>USERS</h2>\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\n      {userProfileElement}\n      <div className='find-friends__pageBtn__inner'>\n        <button\n          className='find-friends__pageBtn btn'\n          onClick={(e) => {\n            onPageChanged(currentPage + 1)\n          }}\n        >\n          Show more\n        </button>\n      </div>\n      <Pagination\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}\n        currentPage={currentPage}\n        onPageChanged={onPageChanged}\n      />\n    </div>\n  )\n})\n\nexport default Users\n","import { useDispatch, useSelector } from 'react-redux'\nimport { FC, useEffect } from 'react'\nimport Users from './Users'\nimport Preloader from '../common/preloader/preloader'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\nimport {\n  getcurrentPage,\n  getIsFetching,\n  getPageSize,\n  getUsersFilter,\n} from '../../redux/selectors/usersSelectors'\nimport { ActionsType, requestUsers } from '../../redux/reducers/usersReduser'\nimport { useSearchParams } from 'react-router-dom'\nimport { AnyAction } from 'redux'\nimport { ThunkType } from '../../Types/Types'\n\ntype QueryParamsType = {\n  term?: string\n  friend?: string\n  page?: string\n}\n\nconst UserPage: FC = () => {\n  const isFetching = useSelector(getIsFetching)\n  const filter = useSelector(getUsersFilter)\n  const pageSize = useSelector(getPageSize)\n  const currentPage = useSelector(getcurrentPage)\n\n  const dispatch = useDispatch()\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  useEffect(() => {\n    const pageQuery = searchParams.get('page')\n    const termQuery = searchParams.get('term') || ''\n    const friendQuery = searchParams.get('friend')\n\n    let actualPage = currentPage\n    let actualFilter = filter\n\n    if (!!pageQuery) actualPage = Number(pageQuery)\n\n    if (!!termQuery)\n      actualFilter = { ...actualFilter, term: termQuery as string }\n\n    if (!!friendQuery)\n      actualFilter = {\n        ...actualFilter,\n        friend:\n          friendQuery === 'null' ? null : friendQuery === 'true' ? true : false,\n      }\n\n    dispatch(\n      requestUsers(\n        actualPage,\n        pageSize,\n        actualFilter\n      ) as ThunkType<ActionsType> & AnyAction\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, pageSize, searchParams])\n\n  useEffect(() => {\n    const query: QueryParamsType = {}\n    if (!!filter.term) query.term = filter.term\n    if (filter.friend !== null) query.friend = String(filter.friend)\n    if (currentPage !== 1) query.page = String(currentPage)\n\n    setSearchParams(query)\n  }, [filter, currentPage, setSearchParams])\n\n  if (isFetching) return <Preloader />\n  return <Users currentPage={currentPage} pageSize={pageSize} filter={filter} />\n}\n\nexport default withAuthReNavigate(UserPage)\n"],"names":["user","id","photos","followed","name","status","followingInProgress","unfollow","follow","className","to","src","small","userAvatar","alt","disabled","some","iD","onClick","totalItemsCount","pageSize","currentPage","onPageChanged","halfPortionSize","pagesCount","Math","ceil","pages","i","push","curPF","curPL","slicedPages","slice","map","page","e","getUsers","state","usersPage","usersData","getPageSize","getTotalUsersCount","totalUsersCount","getcurrentPage","setCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","filter","usersSearchFormValidate","values","memo","props","filterS","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","setTimeout","onFilterChanged","isSubmitting","type","as","value","users","dispatch","useDispatch","pageNumber","requestUsers","userId","getFollow","getUnfollow","userProfileElement","profile","withAuthReNavigate","useSearchParams","searchParams","setSearchParams","useEffect","pageQuery","get","termQuery","friendQuery","actualPage","actualFilter","Number","query"],"sourceRoot":""}