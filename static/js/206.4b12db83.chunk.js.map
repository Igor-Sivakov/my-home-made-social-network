{"version":3,"file":"static/js/206.4b12db83.chunk.js","mappings":"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","sources":["redux/slices/dialogs-slice/dialogsAsyncActions.ts","redux/slices/dialogs-slice/dialogsSelectors.ts","components/Dialogs/DialogListItem/DialogListItem.tsx","components/Dialogs/Messages/InvertMessage/InvertMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogListItem/EditTogglerDialogListItem.tsx","components/Dialogs/Message&DialogElements.tsx","components/Dialogs/MessageForm/MessageForm.tsx","components/Dialogs/Dialogs.tsx","redux/slices/user-slice/userAsyncActions.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { userAPI } from '../../../API/userAPI'\nimport { addFriendsForDialogs } from './dialogsReducer'\n\n\n\n\nexport const getFriendsForDialogs = createAsyncThunk<void, void>('dialogs/getFriendsForDialogs',\n  async (_, { dispatch }) => {\n    try {\n      const response = await userAPI.getUser(1, 10, '', true)\n\n      dispatch(addFriendsForDialogs(response.items))\n    } catch (error) {\n      console.warn(error)\n    }\n  })","import { AppStateType } from \"../../store\"\n\nexport const getDialogsData = (state: AppStateType) => {\n  return state.dialogsPage.dialogsData;\n};\n\nexport const getMessagesData = (state: AppStateType) => {\n  return state.dialogsPage.messagesData;\n};\n","import { FC, memo } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport userAvatar from '../../../assets/img/userAvatar.jpeg'\n\nimport { PeoplesDataType } from '../../../types/reducers.types'\n\nimport './DialogListItem.scss'\n\ntype PropsType = {\n  state: PeoplesDataType\n}\n\nconst DialogListItem: FC<PropsType> = memo(({ state: { name, photos } }) => {\n  return (\n    <li className='dialogs-list__item__container'>\n      <div className='dialogs-list__item__box-for-dot'>\n        <div className='dialogs-list__item__dot' />\n\n        <NavLink to={'/Dialogs'} className='dialogs-list__item__inner'>\n          <img\n            src={photos.small ? photos.small : userAvatar}\n            className='dialogs-list__item__avatar'\n            alt='avatar'\n          />\n\n          <p className='dialogs-list__item__name'>{name}</p>\n        </NavLink>\n      </div>\n    </li>\n  )\n})\n\nexport default DialogListItem\n","import { FC, memo } from 'react'\n\nimport { MessagesDataType } from '../../../../types/reducers.types'\n\nimport UserItem from '../../../common/UserAvatar/UserAvatar'\n\nimport './InvertMessage.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst InvertMessage: FC<PropsType> = memo(({ state: { message, avatar } }) => {\n  return (\n    <div className='dialogs-invert-message__item__lean-to-the-left-board-box'>\n      <div className='dialogs-invert-message__item__container'>\n        <div className='dialogs-invert-message__item__text__inner'>\n          <p className='dialogs-invert-message__item__text'>{message}</p>\n        </div>\n\n        <UserItem avatar={avatar} />\n      </div>\n    </div>\n  )\n})\n\nexport default InvertMessage\n","import { FC, memo } from 'react'\n\nimport { MessagesDataType } from '../../../types/reducers.types'\n\nimport UserItem from '../../common/UserAvatar/UserAvatar'\n\nimport './Messages.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst Messages: FC<PropsType> = memo(({ state: { message, avatar } }) => {\n  return (\n    <div className='dialogs-message__item__conatiner'>\n      <UserItem avatar={avatar} />\n\n      <div className='dialogs-message__item__text__inner'>\n        <p className='dialogs-message__item__text'>{message}</p>\n      </div>\n    </div>\n  )\n})\n\nexport default Messages\n","import { FC, memo, SetStateAction, useEffect, useState } from 'react'\n\nimport { EllipsisOutlined } from '@ant-design/icons'\nimport { PeoplesDataType } from '../../../types/reducers.types'\n\ntype TogglerPropsType = {\n  dialog: (PeoplesDataType & ((prevState: null) => null)) | PeoplesDataType\n\n  setShowBtn: (value: (PeoplesDataType & SetStateAction<null>) | null) => void\n\n  isActive: PeoplesDataType | null\n}\n\nexport const EditTogglerDialogListItem: FC<TogglerPropsType> = memo(\n  ({ dialog, setShowBtn, isActive }) => {\n    const [isTogglerShown, setIsTogglerShown] = useState(true)\n    const [timeOutID, setTimeOutID] = useState()\n\n    useEffect(() => {\n      if (isActive === dialog) {\n        setIsTogglerShown(true)\n        setShowBtn(null)\n        clearTimeout(timeOutID)\n      } else {\n        setIsTogglerShown(true)\n        clearTimeout(timeOutID)\n      }\n    }, [isActive, dialog])\n\n    const editTogglerHandler = () => {\n      setShowBtn(dialog as PeoplesDataType & ((prevState: null) => null))\n      setIsTogglerShown(false)\n      const hideBtn = () => {\n        setIsTogglerShown(true)\n        setShowBtn(null)\n      }\n\n      let timeoutId = setTimeout(hideBtn, 5000)\n      setTimeOutID(timeoutId as NodeJS.Timeout & SetStateAction<undefined>)\n    }\n\n    return (\n      <div onClick={editTogglerHandler}>\n        {isTogglerShown && (\n          <EllipsisOutlined className='dialogs-list__edit-toggler _visible' />\n        )}\n      </div>\n    )\n  }\n)\n","import { FC, memo, SetStateAction, useState } from 'react'\n\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../types/typedDispatch&Selector.types'\n\nimport { getUnfollow } from '../../redux/slices/user-slice/userAsyncActions'\nimport { getFriendsForDialogs } from '../../redux/slices/dialogs-slice/dialogsAsyncActions'\n\nimport {\n  getDialogsData,\n  getMessagesData,\n} from '../../redux/slices/dialogs-slice/dialogsSelectors'\n\nimport { PeoplesDataType } from '../../types/reducers.types'\n\nimport DialogListItem from './DialogListItem/DialogListItem'\nimport InvertMessage from './Messages/InvertMessage/InvertMessage'\nimport Messages from './Messages/Messages'\nimport { EditTogglerDialogListItem } from './DialogListItem/EditTogglerDialogListItem'\n\nimport './DialogListItem/DialogListItem.scss'\n\nexport const DialogElements: FC = memo(() => {\n  const dialogsData = useAppSelector(getDialogsData)\n  const [isActive, setIsActive] = useState(null)\n  const [showBtn, setShowBtn] = useState(null)\n\n  const dispatch = useAppDispatch()\n\n  let dialogElements = dialogsData.map((dialog) => (\n    <div\n      key={dialog.id}\n      onClick={() => {\n        setIsActive(dialog as PeoplesDataType & SetStateAction<null>)\n      }}\n      style={{ height: '70px' }}\n      className={`${\n        isActive === null\n          ? dialog === dialogsData[0] && ' _active'\n          : isActive === dialog && ' _active'\n      }`}\n    >\n      {!!dialog.followed && <DialogListItem state={dialog} />}\n\n      {showBtn === dialog && (\n        <button\n          onClick={() => {\n            //@ts-ignore\n            const id: number = dialog.id\n            dispatch(getUnfollow(id))\n            const getUpdatedList = () => dispatch(getFriendsForDialogs())\n            setTimeout(getUpdatedList, 500)\n\n            setShowBtn(null)\n          }}\n          className={'dialogs-list__delete-dialog-btn btn _hover _visible'}\n        >\n          <div className='dialogs-list__delete-dialog-btn__dot'></div>\n\n          <span>delete dialog</span>\n        </button>\n      )}\n\n      <EditTogglerDialogListItem\n        isActive={isActive}\n        dialog={dialog}\n        setShowBtn={setShowBtn}\n      />\n    </div>\n  ))\n\n  return <>{dialogElements}</>\n})\n\nexport const MessageElements: FC = () => {\n  const messagesData = useAppSelector(getMessagesData)\n\n  let messageElements = messagesData.map((mail) => {\n    //user id emulator\n    let j = ['2', '5', '7', '3']\n    for (let i = 0; i < j.length; i++) {\n      if (j[i] === mail.id) {\n        return <InvertMessage state={mail} key={mail.id} />\n      }\n    }\n\n    return <Messages state={mail} key={mail.id} />\n  })\n\n  return <>{messageElements}</>\n}\n","import { FC, memo } from 'react'\n\nimport { formValidatorMessage } from '../../utils/validators'\n\nimport { useAppSelector } from '../../../types/typedDispatch&Selector.types'\n\nimport { getAuthProfilePhoto } from '../../../redux/slices/auth-slice/authSelectors'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\n\nimport './MessageForm.css'\n\nexport type MessageFormValuesType = {\n  message_form__text: string\n}\n\ntype PropsType = {\n  sendNewMessageBody: ({\n    message,\n    avatar,\n  }: {\n    message: string\n    avatar: string | undefined\n  }) => void\n}\n\nconst MessageForm: FC<PropsType> = memo(({ sendNewMessageBody }) => {\n  const userAvatar = useAppSelector(getAuthProfilePhoto)\n\n  const submit = (\n    values: MessageFormValuesType,\n    {\n      setSubmitting,\n      resetForm,\n    }: {\n      resetForm: (values: object) => void\n      setSubmitting: (isSubmitting: boolean) => void\n    }\n  ) => {\n    if (!values.message_form__text) return\n    setTimeout(() => {\n      const message = values.message_form__text\n      const avatar = userAvatar.small\n\n      sendNewMessageBody({ message, avatar })\n      //backend don`t have API for sending messages, this message will be keeps only in redux\n      resetForm({})\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <Formik\n      initialValues={{ message_form__text: '' }}\n      validate={formValidatorMessage}\n      onSubmit={submit}\n    >\n      {({ isSubmitting, resetForm, handleChange }) => (\n        <Form className='dialogs-message-form__inner'>\n          <Field\n            type='text'\n            name='message_form__text'\n            placeholder='Enter your message...'\n            onChange={handleChange}\n            className='dialogs-message-form__textarea'\n          />\n\n          <ErrorMessage\n            name='message_form__text'\n            component='div'\n            className='_error'\n          />\n\n          <button\n            type='submit'\n            disabled={isSubmitting}\n            className='dialogs-message-form__btn btn _hover'\n          >\n            Send\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n})\n\nexport default MessageForm\n","import { FC, memo, useEffect, useRef, useState } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\n\nimport {\n  useAppSelector,\n  useAppDispatch,\n} from '../../types/typedDispatch&Selector.types'\n\nimport { sendNewMessageBody } from '../../redux/slices/dialogs-slice/dialogsReducer'\nimport { getFriendsForDialogs } from '../../redux/slices/dialogs-slice/dialogsAsyncActions'\n\nimport { getMessagesData } from '../../redux/slices/dialogs-slice/dialogsSelectors'\n\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\n\nimport { DialogElements, MessageElements } from './Message&DialogElements'\nimport MessageForm from './MessageForm/MessageForm'\n\nimport './Dialogs.css'\n\nconst Dialogs: FC = memo(() => {\n  const messages = useAppSelector(getMessagesData)\n  const messageAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      const scrollToNewMessage = () =>\n        messageAnchorRef.current?.scrollIntoView({\n          block: 'end',\n          behavior: 'smooth',\n        })\n\n      setTimeout(scrollToNewMessage, 300)\n    }\n  }, [messages, isAutoScroll])\n\n  useEffect(() => {\n    dispatch(\n      getFriendsForDialogs() as AsyncThunkAction<void, void, {}> & AnyAction\n    )\n  }, [dispatch])\n\n  const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    /* prettier-ignore */\n    Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight\n    ) < 300\n      ? !isAutoScroll && setIsAutoScroll(true)\n      : isAutoScroll && setIsAutoScroll(false)\n  }\n\n  const sendNewMessageBodyD = ({\n    message,\n    avatar,\n  }: {\n    message: string\n    avatar: string | undefined\n  }) => {\n    dispatch(sendNewMessageBody({ message, avatar }))\n  }\n\n  return (\n    <main className='dialogs__container'>\n      <h2 className='main-page__h2'>DIALOGS</h2>\n\n      <div className='dialogs__wrapper'>\n        <section className='dialogs-list__container'>\n          <div className='dialogs-list__inner'>\n            <ul>\n              <DialogElements />\n            </ul>\n          </div>\n        </section>\n\n        <section className='dialogs-messages__container'>\n          <div\n            onScroll={onScrollHandler}\n            className='dialogs-messages__chat-container'\n          >\n            <MessageElements />\n            <div ref={messageAnchorRef}></div>\n          </div>\n\n          <MessageForm sendNewMessageBody={sendNewMessageBodyD} />\n        </section>\n      </div>\n    </main>\n  )\n})\n\nexport default withAuthReNavigate(Dialogs)\n","import { AnyAction, Dispatch } from \"redux\"\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"\n\nimport { follow, setCurrentPage, setFilter, setTotalUsersCount, setUsers, toggleFollowingProgress, toggleIsFetching, unfollow } from \"./usersReducer\"\n\nimport { ResponseDataType, ResultCodeEnum } from \"../../../API/profileAPI\"\nimport { userAPI } from \"../../../API/userAPI\"\n\nimport { UsersFilterType } from \"../../../types/reducers.types\"\n\n\n\n\nexport const requestUsers = createAsyncThunk<void, { actualPage: number, pageSize: number, actualFilter: UsersFilterType }>('users/requestUsers',\n  async ({ actualPage, pageSize, actualFilter }, { dispatch }) => {\n    try {\n      dispatch(toggleIsFetching(true))\n      dispatch(setCurrentPage(actualPage))\n      dispatch(setFilter(actualFilter))\n\n      const users = await userAPI.getUser(actualPage, pageSize,\n        actualFilter.term, actualFilter.friend)\n\n      dispatch(toggleIsFetching(false))\n      dispatch(setUsers(users.items))\n      dispatch(setTotalUsersCount(users.totalCount))\n    } catch (error) {\n      console.warn(error)\n    }\n  })\n\nconst _followUnfollowFlow = async (\n  dispatch: Dispatch<AnyAction>,\n  userId: number,\n  apiMethod: (userId: number) => Promise<ResponseDataType>,\n  actionCreator: (userId: number) => AnyAction\n) => {\n  try {\n    dispatch(toggleFollowingProgress({ inProgress: true, userId }))\n    const followUnfollowResponse = await apiMethod(userId)\n\n    if (followUnfollowResponse.resultCode === ResultCodeEnum.Success) {\n      dispatch(actionCreator(userId))\n    }\n\n    dispatch(toggleFollowingProgress({ inProgress: false, userId }))\n  } catch (error) {\n    console.warn(error)\n  }\n}\n\nexport const getFollow = createAsyncThunk<void, number>('users/getFollow',\n  async (userId, { dispatch }) => {\n    await _followUnfollowFlow(dispatch, userId,\n      userAPI.follow.bind(userAPI), follow\n    )\n  })\n\nexport const getUnfollow = createAsyncThunk<void, number>('users/getUnfollow',\n  async (userId, { dispatch }) => {\n    await _followUnfollowFlow(\n      dispatch,\n      userId,\n      userAPI.unfollow.bind(userAPI),\n      unfollow\n    )\n  })"],"names":["getFriendsForDialogs","createAsyncThunk","_","dispatch","userAPI","response","addFriendsForDialogs","items","console","warn","getDialogsData","state","dialogsPage","dialogsData","getMessagesData","messagesData","memo","name","photos","className","to","src","small","userAvatar","alt","message","avatar","EditTogglerDialogListItem","dialog","setShowBtn","isActive","useState","isTogglerShown","setIsTogglerShown","timeOutID","setTimeOutID","useEffect","clearTimeout","onClick","timeoutId","setTimeout","EllipsisOutlined","DialogElements","useAppSelector","setIsActive","showBtn","useAppDispatch","dialogElements","map","style","height","followed","id","getUnfollow","MessageElements","messageElements","mail","j","i","length","MessageForm","sendNewMessageBody","getAuthProfilePhoto","initialValues","message_form__text","validate","formValidatorMessage","onSubmit","values","setSubmitting","resetForm","isSubmitting","handleChange","type","placeholder","onChange","component","disabled","Dialogs","messages","messageAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","block","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","withAuthReNavigate","requestUsers","actualPage","pageSize","actualFilter","toggleIsFetching","setCurrentPage","setFilter","term","friend","users","setUsers","setTotalUsersCount","totalCount","_followUnfollowFlow","userId","apiMethod","actionCreator","toggleFollowingProgress","inProgress","resultCode","ResultCodeEnum","getFollow","follow","unfollow"],"sourceRoot":""}