{"version":3,"file":"static/js/960.a55a94ab.chunk.js","mappings":"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","sources":["redux/selectors/dialogsSelectors.ts","componets/Dialogs/DialogListItem/DialogListItem.tsx","componets/Dialogs/Messages/InvertMessage/InvertMessage.tsx","componets/Dialogs/Messages/Messages.tsx","componets/Dialogs/DialogListItem/EditTogglerDialogListItem.tsx","componets/Dialogs/Message&DialogElements.tsx","componets/Dialogs/MessageForm/MessageForm.tsx","componets/Dialogs/Dialogs.tsx"],"sourcesContent":["import { AppStateType } from \"../redux-store\"\n\nexport const getDialogsData = (state: AppStateType) => {\n  return state.dialogsPage.dialogsData;\n};\n\nexport const getMessagesData = (state: AppStateType) => {\n  return state.dialogsPage.messagesData;\n};\n","import { NavLink } from 'react-router-dom'\nimport './DialogListItem.scss'\nimport userAvatar from './../../../img/userAvatar.jpeg'\nimport { FC, memo } from 'react'\nimport { PeoplesDataType } from '../../../Types/Types'\n\ntype PropsType = {\n  state: PeoplesDataType\n}\n\nconst DialogListItem: FC<PropsType> = memo(({ state: { name, photos } }) => {\n  return (\n    <li className='dialogs-list__item__container'>\n      <div className='dialogs-list__item__box-for-dot'>\n        <div className='dialogs-list__item__dot'></div>\n        <NavLink to={'/Dialogs'} className='dialogs-list__item__inner'>\n          <img\n            src={photos.small ? photos.small : userAvatar}\n            className='dialogs-list__item__avatar'\n            alt='avatar'\n          ></img>\n          <p className='dialogs-list__item__name'>{name}</p>\n        </NavLink>\n      </div>\n    </li>\n  )\n})\n\nexport default DialogListItem\n","import { FC, memo } from 'react'\nimport { MessagesDataType } from '../../../../Types/Types'\nimport UserItem from '../../../common/UserAvatar/UserAvatar'\nimport './InvertMessage.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst InvertMessage: FC<PropsType> = memo(\n  ({ state: { message, name, avatar } }) => {\n    return (\n      <div className='dialogs-invert-message__item__lean-to-the-left-board-box'>\n        <div className='dialogs-invert-message__item__container'>\n          <div className='dialogs-invert-message__item__text__inner'>\n            <p className='dialogs-invert-message__item__text'>{message}</p>\n          </div>\n          <UserItem avatar={avatar} />\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default InvertMessage\n","import { FC, memo } from 'react'\nimport { MessagesDataType } from '../../../Types/Types'\nimport UserItem from '../../common/UserAvatar/UserAvatar'\nimport './Messages.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst Messages: FC<PropsType> = memo(({ state: { message, avatar, name } }) => {\n  return (\n    <div className='dialogs-message__item__conatiner'>\n      <UserItem avatar={avatar} />\n      <div className='dialogs-message__item__text__inner'>\n        <p className='dialogs-message__item__text'>{message}</p>\n      </div>\n    </div>\n  )\n})\n\nexport default Messages\n","import { FC, memo, SetStateAction, useEffect, useState } from 'react'\nimport { EllipsisOutlined } from '@ant-design/icons'\nimport { PeoplesDataType } from '../../../Types/Types'\n\ntype TogglerPropsType = {\n  dialog: (PeoplesDataType & ((prevState: null) => null)) | PeoplesDataType\n  setShowBtn: (value: (PeoplesDataType & SetStateAction<null>) | null) => void\n  isActive: PeoplesDataType | null\n}\n\nexport const EditTogglerDialogListItem: FC<TogglerPropsType> = memo(\n  ({ dialog, setShowBtn, isActive }) => {\n    const [isTogglerShown, setIsTogglerShown] = useState(true)\n    const [timeOutID, setTimeOutID] = useState()\n    useEffect(() => {\n      if (isActive === dialog) {\n        setIsTogglerShown(true)\n        setShowBtn(null)\n        clearTimeout(timeOutID)\n      } else {\n        setIsTogglerShown(true)\n        clearTimeout(timeOutID)\n      } // eslint-disable-next-line\n    }, [isActive, dialog])\n\n    return (\n      <div\n        onClick={() => {\n          setShowBtn(dialog as PeoplesDataType & ((prevState: null) => null))\n          setIsTogglerShown(false)\n          const hideBtn = () => {\n            setIsTogglerShown(true)\n            setShowBtn(null)\n          }\n          let timeoutId = setTimeout(hideBtn, 5000)\n          setTimeOutID(timeoutId as NodeJS.Timeout & SetStateAction<undefined>)\n        }}\n      >\n        {isTogglerShown && (\n          <EllipsisOutlined className='dialogs-list__edit-toggler _visible' />\n        )}\n      </div>\n    )\n  }\n)\n","import { FC, memo, SetStateAction, useState } from 'react'\nimport { getFriendsForDialogs } from '../../redux/reducers/dialogsReducer'\nimport { getUnfollow } from '../../redux/reducers/usersReduser'\nimport {\n  getDialogsData,\n  getMessagesData,\n} from '../../redux/selectors/dialogsSelectors'\nimport {\n  PeoplesDataType,\n  useAppDispatch,\n  useAppSelector,\n} from '../../Types/Types'\nimport DialogListItem from './DialogListItem/DialogListItem'\nimport InvertMessage from './Messages/InvertMessage/InvertMessage'\nimport Messages from './Messages/Messages'\nimport { EditTogglerDialogListItem } from './DialogListItem/EditTogglerDialogListItem'\nimport './DialogListItem/DialogListItem.scss'\n\nexport const DialogElements: FC = memo((): any => {\n  const dialogsData = useAppSelector(getDialogsData)\n  const [isActive, setIsActive] = useState(null)\n  const [showBtn, setShowBtn] = useState(null)\n\n  const dispatch = useAppDispatch()\n\n  let dialogElements = dialogsData.map((dialog) => (\n    <div\n      key={dialog.id}\n      onClick={() => {\n        setIsActive(dialog as PeoplesDataType & SetStateAction<null>)\n      }}\n      style={{ height: '70px' }}\n      className={`${\n        isActive === null\n          ? dialog === dialogsData[0] && ' _active'\n          : isActive === dialog && ' _active'\n      }`}\n    >\n      {!!dialog.followed && <DialogListItem state={dialog} />}\n\n      {showBtn === dialog && (\n        <button\n          onClick={() => {\n            //@ts-ignore\n            const id: number = dialog.id\n            dispatch(getUnfollow(id))\n            const getUpdatedList = () => dispatch(getFriendsForDialogs())\n            setTimeout(getUpdatedList, 500)\n\n            setShowBtn(null)\n          }}\n          className={'dialogs-list__delete-dialog-btn btn _hover _visible'}\n        >\n          <div className='dialogs-list__delete-dialog-btn__dot'></div>\n          <span>delete dialog</span>\n        </button>\n      )}\n      <EditTogglerDialogListItem\n        isActive={isActive}\n        dialog={dialog}\n        setShowBtn={setShowBtn}\n      />\n    </div>\n  ))\n\n  return dialogElements\n})\n\nexport const MessageElemets: FC = (): any => {\n  const messagesData = useAppSelector(getMessagesData)\n\n  let messageElements = messagesData.map((mail) => {\n    //user id emulator\n    let j = ['2', '5', '7', '3']\n    for (let i = 0; i < j.length; i++) {\n      if (j[i] === mail.id) {\n        return <InvertMessage state={mail} key={mail.id} />\n      }\n    }\n    return <Messages state={mail} key={mail.id} />\n  })\n  return messageElements\n}\n","import { FC, memo } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { getAuthProfilePhoto } from '../../../redux/selectors/authSelectors'\nimport { formValidatorMessage } from '../../utils/validators'\nimport { useAppSelector } from '../../../Types/Types'\nimport './MessageForm.css'\n\nexport type MessageFormValuesType = {\n  message_form__text: string\n}\n\ntype PropsType = {\n  sendNewMessageBody: ({\n    message,\n    avatar,\n  }: {\n    message: string\n    avatar: string | undefined\n  }) => void\n}\n\nconst MessageForm: FC<PropsType> = memo(({ sendNewMessageBody }) => {\n  const userAvatar = useAppSelector(getAuthProfilePhoto)\n\n  const submit = (\n    values: MessageFormValuesType,\n    {\n      setSubmitting,\n      resetForm,\n    }: {\n      resetForm: (values: object) => void\n      setSubmitting: (isSubmitting: boolean) => void\n    }\n  ) => {\n    if (!values.message_form__text) return\n    setTimeout(() => {\n      const message = values.message_form__text\n      const avatar = userAvatar.small\n      sendNewMessageBody({ message, avatar })\n      resetForm({})\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <Formik\n      initialValues={{ message_form__text: '' }}\n      validate={formValidatorMessage}\n      onSubmit={submit}\n    >\n      {({ isSubmitting, resetForm, handleChange }) => (\n        <Form className='dialogs-message-form__inner'>\n          <Field\n            type='text'\n            name='message_form__text'\n            placeholder='Enter your message...'\n            onChange={handleChange}\n            className='dialogs-message-form__textarea'\n          />\n          <ErrorMessage\n            name='message_form__text'\n            component='div'\n            className='_error'\n          />\n          <button\n            type='submit'\n            disabled={isSubmitting}\n            className='dialogs-message-form__btn btn _hover'\n          >\n            Send\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n})\n\nexport default MessageForm\n","import { FC, memo, useEffect, useRef, useState } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\nimport {\n  getFriendsForDialogs,\n  sendNewMessageBody,\n} from '../../redux/reducers/dialogsReducer'\nimport { getMessagesData } from '../../redux/selectors/dialogsSelectors'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\nimport { useAppDispatch, useAppSelector } from '../../Types/Types'\nimport { DialogElements, MessageElemets } from './Message&DialogElements'\nimport MessageForm from './MessageForm/MessageForm'\nimport './Dialogs.css'\n\nconst Dialogs: FC = memo(() => {\n  const messages = useAppSelector(getMessagesData)\n  const messageAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      const scrollToNewMessage = () =>\n        messageAnchorRef.current?.scrollIntoView({\n          block: 'end',\n          behavior: 'smooth',\n        })\n\n      setTimeout(scrollToNewMessage, 300)\n    }\n  }, [messages, isAutoScroll])\n\n  useEffect(() => {\n    dispatch(\n      getFriendsForDialogs() as AsyncThunkAction<void, void, {}> & AnyAction\n    )\n  }, [dispatch])\n\n  const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    /* prettier-ignore */\n    Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight\n    ) < 300\n      ? !isAutoScroll && setIsAutoScroll(true)\n      : isAutoScroll && setIsAutoScroll(false)\n  }\n\n  const sendNewMessageBodyD = ({\n    message,\n    avatar,\n  }: {\n    message: string\n    avatar: string | undefined\n  }) => {\n    dispatch(sendNewMessageBody({ message, avatar }))\n  }\n\n  return (\n    <main className='dialogs__container'>\n      <h2 className='main-page__h2'>DIALOGS</h2>\n      <div className='dialogs__wrapper'>\n        <section className='dialogs-list__conteiner'>\n          <div className='dialogs-list__inner'>\n            <ul>\n              <DialogElements />\n            </ul>\n          </div>\n        </section>\n        <section className='dialogs-messages__conteiner'>\n          <div\n            onScroll={onScrollHandler}\n            className='dialogs-messages__chat-conteiner'\n          >\n            <MessageElemets />\n            <div ref={messageAnchorRef}></div>\n          </div>\n          <MessageForm sendNewMessageBody={sendNewMessageBodyD} />\n        </section>\n      </div>\n    </main>\n  )\n})\n\nexport default withAuthReNavigate(Dialogs)\n"],"names":["getDialogsData","state","dialogsPage","dialogsData","getMessagesData","messagesData","memo","name","photos","className","to","src","small","userAvatar","alt","message","avatar","EditTogglerDialogListItem","dialog","setShowBtn","isActive","useState","isTogglerShown","setIsTogglerShown","timeOutID","setTimeOutID","useEffect","clearTimeout","onClick","timeoutId","setTimeout","EllipsisOutlined","DialogElements","useAppSelector","setIsActive","showBtn","dispatch","useAppDispatch","map","style","height","followed","id","getUnfollow","getFriendsForDialogs","MessageElemets","mail","j","i","length","MessageForm","sendNewMessageBody","getAuthProfilePhoto","initialValues","message_form__text","validate","formValidatorMessage","onSubmit","values","setSubmitting","resetForm","isSubmitting","handleChange","type","placeholder","onChange","component","disabled","Dialogs","messages","messageAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","block","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","withAuthReNavigate"],"sourceRoot":""}