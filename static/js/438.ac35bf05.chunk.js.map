{"version":3,"file":"static/js/438.ac35bf05.chunk.js","mappings":"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","sources":["componets/Users/UserProfile/UserProfile.tsx","componets/common/Pagination/Pagination.tsx","redux/selectors/usersSelectors.ts","componets/Users/UsersSearchForm/UsersSearchForm.tsx","componets/Users/Users.tsx","componets/Users/UsersPage.tsx"],"sourcesContent":["import './UserProfile.css'\nimport userAvatar from '../../../img/userAvatar.jpeg'\nimport { NavLink } from 'react-router-dom'\nimport { FC, memo } from 'react'\nimport { UserDataType } from '../../../Types/Types'\n\ntype PropsType = {\n  user: UserDataType\n  followingInProgress: number[]\n  follow: (userId: number) => void\n  unfollow: (userId: number) => void\n}\n\nconst UserProfile: FC<PropsType> = memo(\n  ({\n    user: { id, photos, followed, name, status },\n    followingInProgress,\n    unfollow,\n    follow,\n  }) => {\n    return (\n      <section className='find-friends__profile__container'>\n        <div className='find-friends__profile__inner'>\n          <div className='find-friends__profile__img-name__wrapper'>\n            <NavLink className='' to={'/Profile/' + id}>\n              <img\n                src={photos.small != null ? photos.small : userAvatar}\n                className='find-friends__profile__img'\n                alt='avatar'\n              />\n            </NavLink>\n            <div>\n              <NavLink className='' to={'/Profile/' + id}>\n                <p className='find-friends__profile__name'>{name}</p>\n              </NavLink>\n              <p className='find-friends__profile__status'>\n                {status != null\n                  ? status\n                  : 'Hi guys! Tomorrow I will be boarding, who is with me?'}\n              </p>\n            </div>\n          </div>\n\n          <div>\n            {followed ? (\n              <button\n                disabled={followingInProgress.some((iD) => iD === id)}\n                onClick={() => {\n                  unfollow(id)\n                }}\n                className='find-friends__profile__add-btn btn _hover'\n              >\n                Unfollow\n              </button>\n            ) : (\n              <button\n                disabled={followingInProgress.some((iD) => iD === id)}\n                onClick={() => {\n                  follow(id)\n                }}\n                className='find-friends__profile__add-btn btn _hover'\n              >\n                Follow\n              </button>\n            )}\n          </div>\n        </div>\n      </section>\n    )\n  }\n)\n\nexport default UserProfile\n","import './Pagination.css'\nimport { FC, memo } from 'react'\n\ntype PropsType = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  halfPortionSize?: number\n  onPageChanged: (page: number) => void\n}\n\nconst Pagination: FC<PropsType> = memo(\n  ({\n    totalItemsCount,\n    pageSize,\n    currentPage,\n    onPageChanged,\n    halfPortionSize = 5,\n  }) => {\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages: number[] = []\n\n    for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i)\n    }\n\n    let curP = currentPage\n    let curPF = curP - halfPortionSize < 0 ? 0 : curP - halfPortionSize\n    let curPL = curP + halfPortionSize\n    let slicedPages = pages.slice(curPF, curPL)\n\n    return (\n      <div className='pagination__container'>\n        {slicedPages.map((page) => {\n          return (\n            <div className='pagination__page' key={page}>\n              <span\n                key={page}\n                className={\n                  currentPage === page ? 'pagination__selected-page _hover' : ''\n                }\n                onClick={(e) => {\n                  onPageChanged(page)\n                }}\n              >\n                {page}\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\n\nexport default Pagination\n","//import { createSelector } from 'reselect';\n\nimport { AppStateType } from \"../redux-store\"\n\nexport const getUsers = (state: AppStateType) => {\n  return state.usersPage.usersData\n}\n\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n  return state.usersPage.totalUsersCount\n}\n\nexport const getcurrentPage = (state: AppStateType) => {\n  return state.usersPage.setCurrentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n  return state.usersPage.filter\n}\n\n// example hard selector created by reselect\n/* export const getUsersSuperSelector = createSelector(\n  getUsers,\n  getIsFetching,\n  (users, isFetching) => {\n    return users.filter((u) => true);\n  }\n);\n */\n","import { Formik, Form, Field } from 'formik'\nimport { FC, memo } from 'react'\nimport { getUsersFilter } from '../../../redux/selectors/usersSelectors'\nimport { useAppSelector, UsersFilterType } from '../../../Types/Types'\nimport './UsersSearchForm.css'\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {}\n  return errors\n}\n\ntype FormType = {\n  term: string\n  friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n  onFilterChanged: (filter: UsersFilterType) => void\n}\n\nconst UsersSearchForm: FC<PropsType> = memo((props) => {\n  const filterS = useAppSelector(getUsersFilter)\n\n  const submit = (\n    values: FormType,\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\n  ) => {\n    const filter: UsersFilterType = {\n      term: values.term,\n      friend:\n        values.friend === 'null'\n          ? null\n          : values.friend === 'true'\n          ? true\n          : false,\n    }\n    setTimeout(() => {\n      props.onFilterChanged(filter)\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <section className='find-friends__search-form__container'>\n      <Formik\n        enableReinitialize\n        initialValues={\n          { term: filterS.term, friend: String(filterS.friend) } as FormType\n        }\n        validate={usersSearchFormValidate}\n        onSubmit={submit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Field\n              className='find-friends__search-form__text-input'\n              type='text'\n              name='term'\n            />\n            <Field\n              className='find-friends__search-form__select'\n              name='friend'\n              as='select'\n            >\n              <option value='null'>All</option>\n              <option value='true'>Only followed</option>\n              <option value='false'>Only unfollowed</option>\n            </Field>\n            <button\n              className='find-friends__search-form__btn btn _hover'\n              type='submit'\n              disabled={isSubmitting}\n            >\n              Find\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </section>\n  )\n})\n\nexport default UsersSearchForm\n","import './Users.css'\nimport UserProfile from './UserProfile/UserProfile'\nimport Pagination from '../common/Pagination/Pagination'\nimport { FC, memo } from 'react'\nimport {\n  useAppDispatch,\n  useAppSelector,\n  UserDataType,\n  UsersFilterType,\n} from '../../Types/Types'\nimport UsersSearchForm from './UsersSearchForm/UsersSearchForm'\nimport {\n  getFollowingInProgress,\n  getTotalUsersCount,\n  getUsers,\n} from '../../redux/selectors/usersSelectors'\nimport {\n  getFollow,\n  getUnfollow,\n  requestUsers,\n} from '../../redux/reducers/usersReduser'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\n\ntype PropsType = {\n  currentPage: number\n  pageSize: number\n  filter: UsersFilterType\n}\n\nconst Users: FC<PropsType> = memo(({ currentPage, pageSize, filter }) => {\n  const users = useAppSelector(getUsers)\n  const totalUsersCount = useAppSelector(getTotalUsersCount)\n  const followingInProgress = useAppSelector(getFollowingInProgress)\n\n  const dispatch = useAppDispatch()\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(\n      requestUsers({\n        actualPage: pageNumber,\n        pageSize,\n        actualFilter: filter,\n      }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n  }\n\n  const onFilterChanged = (filter: UsersFilterType) => {\n    dispatch(\n      requestUsers({\n        actualPage: 1,\n        pageSize,\n        actualFilter: filter,\n      }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n  }\n\n  const follow = (userId: number) => {\n    dispatch(\n      getFollow(userId) as AsyncThunkAction<void, number, {}> & AnyAction\n    )\n  }\n\n  const unfollow = (userId: number) => {\n    dispatch(\n      getUnfollow(userId) as AsyncThunkAction<void, number, {}> & AnyAction\n    )\n  }\n\n  let userProfileElement = users.map((profile: UserDataType) => (\n    <UserProfile\n      user={profile}\n      key={profile.id}\n      follow={follow}\n      unfollow={unfollow}\n      followingInProgress={followingInProgress}\n    />\n  ))\n\n  return (\n    <main className='find-friends__container'>\n      <h2 className='main-page__h2'>USERS</h2>\n      <div className='find-friends__wrapper'>\n        <section className='find-friends__inner'>\n          <UsersSearchForm onFilterChanged={onFilterChanged} />\n          <div className='find-friends__item__inner'>{userProfileElement}</div>\n          <button\n            className='find-friends__next-page-btn btn _hover'\n            onClick={(e) => {\n              onPageChanged(currentPage + 1)\n            }}\n          >\n            Show more\n          </button>\n          <Pagination\n            totalItemsCount={totalUsersCount}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChanged={onPageChanged}\n          />\n        </section>\n      </div>\n    </main>\n  )\n})\n\nexport default Users\n","import { FC, memo, useEffect } from 'react'\nimport Users from './Users'\nimport Preloader from '../common/preloader/preloader'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\nimport {\n  getcurrentPage,\n  getIsFetching,\n  getPageSize,\n  getUsersFilter,\n} from '../../redux/selectors/usersSelectors'\nimport { requestUsers } from '../../redux/reducers/usersReduser'\nimport { useSearchParams } from 'react-router-dom'\nimport {\n  useAppDispatch,\n  useAppSelector,\n  UsersFilterType,\n} from '../../Types/Types'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\n\ntype QueryParamsType = {\n  term?: string\n  friend?: string\n  page?: string\n}\n\nconst UserPage: FC = memo(() => {\n  const isFetching = useAppSelector(getIsFetching)\n  const filter = useAppSelector(getUsersFilter)\n  const pageSize = useAppSelector(getPageSize)\n  const currentPage = useAppSelector(getcurrentPage)\n\n  const dispatch = useAppDispatch()\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  useEffect(() => {\n    const pageQuery = searchParams.get('page')\n    const termQuery = searchParams.get('term') || ''\n    const friendQuery = searchParams.get('friend')\n\n    let actualPage = currentPage\n    let actualFilter = filter\n\n    if (!!pageQuery) actualPage = Number(pageQuery)\n\n    if (!!termQuery)\n      actualFilter = { ...actualFilter, term: termQuery as string }\n\n    if (!!friendQuery)\n      actualFilter = {\n        ...actualFilter,\n        friend:\n          friendQuery === 'null' ? null : friendQuery === 'true' ? true : false,\n      }\n\n    dispatch(\n      requestUsers({ actualPage, pageSize, actualFilter }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, pageSize, searchParams])\n\n  useEffect(() => {\n    const query: QueryParamsType = {}\n    if (!!filter.term) query.term = filter.term\n    if (filter.friend !== null) query.friend = String(filter.friend)\n    if (currentPage !== 1) query.page = String(currentPage)\n\n    setSearchParams(query)\n  }, [filter, currentPage, setSearchParams])\n\n  if (isFetching) return <Preloader />\n  return <Users currentPage={currentPage} pageSize={pageSize} filter={filter} />\n})\n\nexport default withAuthReNavigate(UserPage)\n"],"names":["memo","user","id","photos","followed","name","status","followingInProgress","unfollow","follow","className","to","src","small","userAvatar","alt","disabled","some","iD","onClick","totalItemsCount","pageSize","currentPage","onPageChanged","halfPortionSize","pagesCount","Math","ceil","pages","i","push","curPF","curPL","slicedPages","slice","map","page","e","getUsers","state","usersPage","usersData","getPageSize","getTotalUsersCount","totalUsersCount","getcurrentPage","setCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","filter","usersSearchFormValidate","values","props","filterS","useAppSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","setTimeout","onFilterChanged","isSubmitting","type","as","value","users","dispatch","useAppDispatch","pageNumber","requestUsers","actualPage","actualFilter","userId","getFollow","getUnfollow","userProfileElement","profile","UserPage","useSearchParams","searchParams","setSearchParams","useEffect","pageQuery","get","termQuery","friendQuery","Number","query","withAuthReNavigate"],"sourceRoot":""}