{"version":3,"file":"static/js/221.c8452295.chunk.js","mappings":"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","sources":["componets/Dialogs/MessageForm/MessageForm.tsx","redux/selectors/dialogsSelectors.ts","componets/Dialogs/DialogListItem/DialogListItem.tsx","componets/Dialogs/UserItem/UserItem.tsx","componets/Dialogs/Messages/InvertMessage/InvertMessage.tsx","componets/Dialogs/Messages/Messages.tsx","componets/Dialogs/Message&DialogElements.tsx","componets/Dialogs/Dialogs.tsx"],"sourcesContent":["import './MessageForm.css'\nimport { FC } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { formValidatorMessage } from '../../utils/validators'\n\ntype MessageFormValuesType = {\n  messageText: string\n}\n\ntype PropsType = {\n  sendNewMessageBody: (messageText: string) => void\n}\n\nconst MessageForm: FC<PropsType> = ({ sendNewMessageBody }) => {\n  const submit = (\n    values: MessageFormValuesType,\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\n  ) => {\n    setTimeout(() => {\n      sendNewMessageBody(values.messageText)\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <div className='messageForm__wrapper'>\n      <Formik\n        initialValues={{ messageText: '' }}\n        validate={formValidatorMessage}\n        onSubmit={submit}\n      >\n        {({ isSubmitting }) => (\n          <Form className='messageForm__inner'>\n            <Field\n              name='messageText'\n              placeholder='Enter your message...'\n              className='messageForm__textArea'\n            />\n            <ErrorMessage\n              name='messageText'\n              component='div'\n              className='_error'\n            />\n            <button\n              type='submit'\n              disabled={isSubmitting}\n              className='messageForm__btn btn'\n            >\n              Send\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  )\n}\n\nexport default MessageForm\n","import { AppStateType } from \"../redux-store\";\n\nexport const getDialogsData = (state: AppStateType) => {\n  return state.dialogsPage.dialogsData;\n};\n\nexport const getMessagesData = (state: AppStateType) => {\n  return state.dialogsPage.messagesData;\n};\n","import { NavLink } from 'react-router-dom'\nimport './DialogListItem.css'\nimport userAvatar from './../../../img/userAvatar.jpeg'\nimport { FC } from 'react'\nimport { PeoplesDataType } from '../../../Types/Types'\n\ntype PropsType = {\n  state: PeoplesDataType\n}\n\nconst DialogListItem: FC<PropsType> = ({ state: { name, photos, id } }) => {\n  let path = '/Dialogs/' + id\n  return (\n    <li className='dialogList__item'>\n      <div className='dialogList__item__boxForPoint'>\n        <div className='dialogList__point'></div>\n        <NavLink to={path} className='dialogList__item__conteiner'>\n          <img\n            src={photos.small ? photos.small : userAvatar}\n            className='dialogList__avatar'\n            alt='avatar'\n          ></img>\n          <p className='dialogList__name'>{name}</p>\n        </NavLink>\n      </div>\n    </li>\n  )\n}\n\nexport default DialogListItem\n","import './UserItem.css'\nimport { FC } from 'react'\nimport { MessagesDataType } from '../../../Types/Types'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst UserItem: FC<PropsType> = ({ state: { avatar, name } }) => {\n  return (\n    <div className='userItem__avatar'>\n      <img src={avatar} alt='message-avatar' />\n      <p className='userItem__name'>{name}</p>\n    </div>\n  )\n}\n\nexport default UserItem\n","import { FC } from 'react'\nimport { MessagesDataType } from '../../../../Types/Types'\nimport UserItem from '../../UserItem/UserItem'\nimport './InvertMessage.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst InvertMessage: FC<PropsType> = ({ state }) => {\n  return (\n    <div className='invertMessage__decoration'>\n      <div className='invertMessage__item'>\n        <div className='invertMessage__item__innerText'>\n          <p className='invertMessage__item__text'>{state.message}</p>\n        </div>\n        <UserItem state={state} />\n      </div>\n    </div>\n  )\n}\n\nexport default InvertMessage\n","import { FC } from 'react'\nimport { MessagesDataType } from '../../../Types/Types'\nimport UserItem from '../UserItem/UserItem'\nimport './Messages.css'\n\ntype PropsType = {\n  state: MessagesDataType\n}\n\nconst Messages: FC<PropsType> = ({ state }) => {\n  return (\n    <div className='message__item'>\n      <UserItem state={state} />\n      <div className='message__item__innerText'>\n        <p className='message__item__text'>{state.message}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Messages\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  getDialogsData,\n  getMessagesData,\n} from '../../redux/selectors/dialogsSelectors'\nimport DialogListItem from './DialogListItem/DialogListItem'\nimport InvertMessage from './Messages/InvertMessage/InvertMessage'\nimport Messages from './Messages/Messages'\n\nexport const DialogElements: FC = (): any => {\n  const dialogsData = useSelector(getDialogsData)\n\n  let dialogElements = dialogsData.map((dialog) => (\n    <DialogListItem state={dialog} key={dialog.id} />\n  ))\n\n  return dialogElements\n}\n\nexport const MessageElemets: FC = (): any => {\n  const messagesData = useSelector(getMessagesData)\n\n  let messageElements = messagesData.map((mail) => {\n    //user id emulator\n    let j = [2, 5, 7, 3, 9, 11, 13, 15, 17]\n    for (let i = 0; i < j.length; i++) {\n      if (j[i] === mail.id) {\n        return <InvertMessage state={mail} key={mail.id} />\n      }\n    }\n    return <Messages state={mail} key={mail.id} />\n  })\n  return messageElements\n}\n","import './Dialogs.css'\nimport MessageForm from './MessageForm/MessageForm'\nimport { FC, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  actions,\n  getFriendsForDialogs,\n} from '../../redux/reducers/dialogsReducer'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\nimport { DialogElements, MessageElemets } from './Message&DialogElements'\n\nconst Dialogs: FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getFriendsForDialogs() as any)\n  }, [dispatch])\n\n  const sendNewMessageBodyD = (message: string) => {\n    dispatch(actions.sendNewMessageBody(message) as any)\n  }\n\n  return (\n    <div className='dialogs'>\n      <h2 className='main-page__h2'>DIALOGS</h2>\n      <div className='dialogs-wrapper'>\n        <div className='usersList-conteiner'>\n          <div className='usersList__inner'>\n            <ul>\n              <DialogElements />\n            </ul>\n          </div>\n        </div>\n        <div className='messages-conteiner'>\n          <MessageForm sendNewMessageBody={sendNewMessageBodyD} />\n          <div className='messages-conteiner__small'>\n            <MessageElemets />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthReNavigate(Dialogs)\n"],"names":["sendNewMessageBody","className","initialValues","messageText","validate","formValidatorMessage","onSubmit","values","setSubmitting","setTimeout","isSubmitting","name","placeholder","component","type","disabled","getDialogsData","state","dialogsPage","dialogsData","getMessagesData","messagesData","photos","path","id","to","src","small","userAvatar","alt","avatar","message","DialogElements","useSelector","map","dialog","MessageElemets","mail","j","i","length","withAuthReNavigate","dispatch","useDispatch","useEffect","getFriendsForDialogs","actions"],"sourceRoot":""}