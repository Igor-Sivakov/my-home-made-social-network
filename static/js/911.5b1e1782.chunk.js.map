{"version":3,"file":"static/js/911.5b1e1782.chunk.js","mappings":"yKAEaA,EAAkB,SAACC,GAC9B,OAAOA,EAAMC,KAAKC,QACpB,EAEaC,EAAY,SAACH,GACxB,OAAOA,EAAMC,KAAKG,MACpB,E,uCCKaC,GAAsBC,EAAAA,EAAAA,OAAK,WACtC,IAAMF,GAASG,EAAAA,EAAAA,GAAeJ,GAExBK,GAAWC,EAAAA,EAAAA,KA2BjB,OACE,SAAC,KAAM,CACLC,cAAe,CAAEC,wBAAyB,IAC1CC,SAAUC,EAAAA,GACVC,SA7BuB,SACzBC,EAAkC,GAQ9B,IANFC,EAAS,EAATA,UACAC,EAAa,EAAbA,cAMGF,EAAOJ,yBACZO,YAAW,WACTV,GACEW,EAAAA,EAAAA,IAAYJ,EAAOJ,0BAOrBK,EAAU,CAAC,GACXC,GAAc,EAChB,GAAG,IACL,EAMiC,SAE5B,YAAY,EAATD,UAAH,IAAcI,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAY,OACvC,UAAC,KAAI,CAACC,UAAU,2BAA0B,WACxC,SAAC,KAAK,CACJC,KAAK,0BACLC,KAAK,OACLC,SAAUJ,EACVK,YAAY,wBACZJ,UAAU,iCAEZ,SAAC,KAAY,CACXC,KAAK,0BACLI,UAAU,MACVL,UAAU,YAEZ,mBACEE,KAAK,SACLI,SAAqB,UAAXxB,GAAsBgB,EAChCE,UAAU,oCAAmC,oBAI1C,GAIf,I,mBCrEaO,GAAgDvB,EAAAA,EAAAA,OAC3D,YAAgD,IAAD,IAA5CwB,QAAWC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUF,EAAO,EAAPA,QAC7B,OACE,iBAAKR,UAAU,0BAAyB,WACtC,SAACW,EAAA,EAAU,CAACC,OAAQH,KACpB,iBAAKT,UAAU,+BAA8B,WAC3C,gBAAKA,UAAU,0BAAyB,SAAEU,KAC1C,gBAAKV,UAAU,6BAA4B,SAAEQ,SAIrD,ICVWK,GAAmB7B,EAAAA,EAAAA,OAAK,WACnC,IAAMJ,GAAWK,EAAAA,EAAAA,GAAeR,GAC1BqC,GAAmBC,EAAAA,EAAAA,QAAuB,MAChD,GAAwCC,EAAAA,EAAAA,WAAS,GAAK,eAA/CC,EAAY,KAAEC,EAAe,KAuBpC,OAZAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAc,CAOhBrB,YAN2B,WAAH,aACE,QADF,EACtBkB,EAAiBM,eAAO,aAAxB,EAA0BC,eAAe,CACvCC,MAAO,MACPC,SAAU,UACV,GAE2B,IACjC,CACF,GAAG,CAAC3C,EAAUqC,KAGZ,iBAAKjB,UAAU,kCAAkCwB,SAtB3B,SAACC,GACvB,IAAMC,EAAUD,EAAEE,cAElBC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAC1D,KACCf,GAAgBC,GAAgB,GACjCD,GAAgBC,GAAgB,EACtC,EAe6E,UACxEtC,EAASqD,KAAI,SAACC,EAAGC,GAAK,OACrB,SAAC,EAAW,CAAC3B,QAAS0B,GAAQC,EAAS,KAEzC,gBAAKC,IAAKtB,MAGhB,ICCA,GA7BqB9B,EAAAA,EAAAA,OAAK,WACxB,IAAME,GAAWC,EAAAA,EAAAA,KACXL,GAASG,EAAAA,EAAAA,GAAeJ,GAa9B,OAXAsC,EAAAA,EAAAA,YAAU,WAIR,OAHAjC,GACEmD,EAAAA,EAAAA,OAEK,WACLnD,GACEoD,EAAAA,EAAAA,MAEJ,CACF,GAAG,KAGD,kBAAMtC,UAAU,kBAAiB,WAC/B,eAAIA,UAAU,gBAAe,kBACjB,UAAXlB,IACC,2EAEF,iBAAKkB,UAAU,cAAa,WAC1B,SAAC,EAAY,KACb,SAAC,EAAe,SAIxB,G","sources":["redux/selectors/chatSelectors.ts","componets/Chat/Messages&Form/ChatMessageForm/ChatMessageForm.tsx","componets/Chat/Messages&Form/ChatMessages/ChatMessage/ChatMessage.tsx","componets/Chat/Messages&Form/ChatMessages/ChatMessages.tsx","componets/Chat/ChatPage.tsx"],"sourcesContent":["import { AppStateType } from \"../redux-store\"\n\nexport const getChatMessages = (state: AppStateType) => {\n  return state.chat.messages\n}\n\nexport const getStatus = (state: AppStateType) => {\n  return state.chat.status\n}","import { FC, memo } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\nimport { sendMessage } from '../../../../redux/reducers/chatReduser'\nimport { getStatus } from '../../../../redux/selectors/chatSelectors'\nimport { useAppDispatch, useAppSelector } from '../../../../Types/Types'\nimport { formValidatorChat } from '../../../utils/validators'\nimport './ChatMessageForm.css'\n\nexport type ChatMessageFormValuesType = {\n  chat_message_form__text: string\n}\n\nexport const ChatMessageForm: FC = memo(() => {\n  const status = useAppSelector(getStatus)\n\n  const dispatch = useAppDispatch()\n\n  const sendMessageHandler = (\n    values: ChatMessageFormValuesType,\n    {\n      resetForm,\n      setSubmitting,\n    }: {\n      resetForm: (values: object) => void\n      setSubmitting: (isSubmitting: boolean) => void\n    }\n  ) => {\n    if (!values.chat_message_form__text) return\n    setTimeout(() => {\n      dispatch(\n        sendMessage(values.chat_message_form__text) as AsyncThunkAction<\n          void,\n          string,\n          {}\n        > &\n          AnyAction\n      )\n      resetForm({})\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <Formik\n      initialValues={{ chat_message_form__text: '' }}\n      validate={formValidatorChat}\n      onSubmit={sendMessageHandler}\n    >\n      {({ resetForm, isSubmitting, handleChange }) => (\n        <Form className='chat_message_form__inner'>\n          <Field\n            name='chat_message_form__text'\n            type='text'\n            onChange={handleChange}\n            placeholder='Enter your message...'\n            className='chat-message-form__textarea'\n          />\n          <ErrorMessage\n            name='chat_message_form__text'\n            component='div'\n            className='_error'\n          />\n          <button\n            type='submit'\n            disabled={status !== 'ready' || isSubmitting}\n            className='chat-message-form__btn btn _hover'\n          >\n            Send\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n})\n","import { FC, memo } from 'react'\nimport { ChatMessageType } from '../../../../API/chatAPI'\nimport UserAvatar from '../../../../common/UserAvatar/UserAvatar'\nimport './ChatMessage.css'\n\nexport const ChatMessage: FC<{ message: ChatMessageType }> = memo(\n  ({ message: { photo, userName, message } }) => {\n    return (\n      <div className='chat-message__container'>\n        <UserAvatar avatar={photo} />\n        <div className='chat-message__message__inner'>\n          <div className='chat-message__user-name'>{userName}</div>\n          <div className='chat-message__message-text'>{message}</div>\n        </div>\n      </div>\n    )\n  }\n)\n","import { FC, memo, useEffect, useRef, useState } from 'react'\nimport { getChatMessages } from '../../../../redux/selectors/chatSelectors'\nimport { useAppSelector } from '../../../../Types/Types'\nimport { ChatMessage } from './ChatMessage/ChatMessage'\nimport './ChatMessages.css'\n\nexport const ChatMessages: FC = memo(() => {\n  const messages = useAppSelector(getChatMessages)\n  const messageAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    /* prettier-ignore */\n    Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight\n    ) < 300\n      ? !isAutoScroll && setIsAutoScroll(true)\n      : isAutoScroll && setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      const scrollToNewMessage = () =>\n        messageAnchorRef.current?.scrollIntoView({\n          block: 'end',\n          behavior: 'smooth',\n        })\n\n      setTimeout(scrollToNewMessage, 300)\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <div className='chat-messages-screen__container' onScroll={onScrollHandler}>\n      {messages.map((m, index) => (\n        <ChatMessage message={m} key={index} />\n      ))}\n      <div ref={messageAnchorRef}></div>\n    </div>\n  )\n})\n","import { FC, memo, useEffect } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\nimport {\n  startMesssagesListening,\n  stopMesssagesListening,\n} from '../../redux/reducers/chatReduser'\nimport { getStatus } from '../../redux/selectors/chatSelectors'\nimport { ChatMessageForm } from './Messages&Form/ChatMessageForm/ChatMessageForm'\nimport { ChatMessages } from './Messages&Form/ChatMessages/ChatMessages'\nimport { useAppDispatch, useAppSelector } from '../../Types/Types'\nimport './ChatPage.css'\n\nconst ChatPage: FC = memo(() => {\n  const dispatch = useAppDispatch()\n  const status = useAppSelector(getStatus)\n\n  useEffect(() => {\n    dispatch(\n      startMesssagesListening() as AsyncThunkAction<void, void, {}> & AnyAction\n    )\n    return () => {\n      dispatch(\n        stopMesssagesListening() as AsyncThunkAction<void, void, {}> & AnyAction\n      )\n    }\n  }, []) // eslint-disable-line\n\n  return (\n    <main className='chat__container'>\n      <h2 className='main-page__h2'>CHAT</h2>\n      {status === 'error' && (\n        <div>Some error occured. Please refresh the page.</div>\n      )}\n      <div className='chat__inner'>\n        <ChatMessages />\n        <ChatMessageForm />\n      </div>\n    </main>\n  )\n})\n\nexport default ChatPage\n"],"names":["getChatMessages","state","chat","messages","getStatus","status","ChatMessageForm","memo","useAppSelector","dispatch","useAppDispatch","initialValues","chat_message_form__text","validate","formValidatorChat","onSubmit","values","resetForm","setSubmitting","setTimeout","sendMessage","isSubmitting","handleChange","className","name","type","onChange","placeholder","component","disabled","ChatMessage","message","photo","userName","UserAvatar","avatar","ChatMessages","messageAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","block","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","startMesssagesListening","stopMesssagesListening"],"sourceRoot":""}