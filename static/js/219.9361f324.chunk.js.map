{"version":3,"file":"static/js/219.9361f324.chunk.js","mappings":"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","sources":["API/chatAPI.ts","redux/slices/chat-slice/chatAsyncActions.ts","redux/slices/chat-slice/chatSelectors.ts","components/Chat/Messages&Form/ChatMessageForm/ChatMessageForm.tsx","components/Chat/Messages&Form/ChatMessages/ChatMessage/ChatMessage.tsx","components/Chat/Messages&Form/ChatMessages/ChatMessages.tsx","components/Chat/ChatPage.tsx"],"sourcesContent":["\nexport type ChatMessageAPIType = {\n  message: string\n  photo: string | undefined\n  userId: number\n  userName: string\n}\n\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\nexport type MessagesReceivedSubscriberType = (messages: ChatMessageType[]) => void\n\nexport type StatusChangedSubscriberType = (status: StatusType) => void\n\nlet ws: WebSocket | null = null\n\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst subscribers = {\n  'messages-received': [] as MessagesReceivedSubscriberType[],\n  'status-changed': [] as StatusChangedSubscriberType[]\n}\n\n\nconst closeHandler = () => {\n  notifySubscribersAboutStatus('pending')\n  setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data)\n  subscribers['messages-received'].forEach(s => s(newMessages))\n}\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready')\n}\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error')\n  console.error('Some error occurred. Please refresh the page.')\n}\n\n\nconst cleanUp = () => {\n  ws?.removeEventListener('close', closeHandler)\n  ws?.removeEventListener('message', messageHandler)\n  ws?.removeEventListener('open', openHandler)\n  ws?.removeEventListener('error', errorHandler)\n}\n\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n  subscribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n  cleanUp()\n  ws?.close()\n  ws = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  )\n  notifySubscribersAboutStatus('pending')\n  ws.addEventListener('close', closeHandler)\n  ws.addEventListener('message', messageHandler)\n  ws.addEventListener('open', openHandler)\n  ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n  start() {\n    createChannel()\n  },\n\n  stop() {\n    subscribers['messages-received'] = []\n    subscribers['status-changed'] = []\n    cleanUp()\n    ws?.close()\n  },\n\n  subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n    subscribers[eventName].push(callback as MessagesReceivedSubscriberType & StatusChangedSubscriberType)\n    return () => {\n      //@ts-ignore\n      subscribers[eventName] = subscribers[eventName].filter((s: MessagesReceivedSubscriberType | StatusChangedSubscriberType) => s !== callback)\n    }\n  },\n\n  unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n    //@ts-ignore\n    subscribers[eventName] = subscribers[eventName].filter((s: MessagesReceivedSubscriberType | StatusChangedSubscriberType) => s !== callback)\n  },\n\n  sendMessage(message: string) {\n    ws?.send(message)\n  }\n}","import { Dispatch } from 'redux'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { chatAPI, ChatMessageType, MessagesReceivedSubscriberType, StatusChangedSubscriberType, StatusType } from \"../../../API/chatAPI\"\n\nimport { messagesReceived, statusChanged } from './chatReducer'\n\n\n\ntype NewMessageHandlerType = ((messages: ChatMessageType[]) => void) | null\n\ntype NewStatusHandlerType = ((status: StatusType) => void) | null\n\n\nlet _newMessageHandler: NewMessageHandlerType = null\n\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n  if (_newMessageHandler === null) {\n    _newMessageHandler = (messages) => {\n      dispatch(messagesReceived(messages))\n    }\n  }\n\n  return _newMessageHandler\n}\n\nlet _newStatusHandler: NewStatusHandlerType = null\n\nconst newStatusHandlerCreator = (dispatch: Dispatch) => {\n  if (_newStatusHandler === null) {\n    _newStatusHandler = (status) => {\n      dispatch(statusChanged(status))\n    }\n  }\n\n  return _newStatusHandler\n}\n\nexport const startMessagesListening = createAsyncThunk<void, void>(\n  'chat/startMessagesListening', async (_, { dispatch }) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch) as MessagesReceivedSubscriberType)\n    chatAPI.subscribe('status-changed', newStatusHandlerCreator(dispatch) as\n      StatusChangedSubscriberType)\n  })\n\nexport const stopMessagesListening = createAsyncThunk<void, void>('chat/stopMessagesListening', async (_, { dispatch }) => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch) as MessagesReceivedSubscriberType)\n  chatAPI.unsubscribe('status-changed', newStatusHandlerCreator(dispatch) as\n    StatusChangedSubscriberType)\n  chatAPI.stop()\n})\n\nexport const sendMessage = createAsyncThunk<void, string>('chat/sendMessage',\n  async (message, { dispatch }) => {\n    chatAPI.sendMessage(message)\n  })","import { AppStateType } from \"../../store\"\n\nexport const getChatMessages = (state: AppStateType) => {\n  return state.chat.messages\n}\n\nexport const getStatus = (state: AppStateType) => {\n  return state.chat.status\n}","import { FC, memo } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\n\nimport { formValidatorChat } from '../../../utils/validators'\n\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../../../types/typedDispatch&Selector.types'\n\nimport { sendMessage } from '../../../../redux/slices/chat-slice/chatAsyncActions'\n\nimport { getStatus } from '../../../../redux/slices/chat-slice/chatSelectors'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\n\nimport './ChatMessageForm.css'\n\nexport type ChatMessageFormValuesType = {\n  chat_message_form__text: string\n}\n\nexport const ChatMessageForm: FC = memo(() => {\n  const status = useAppSelector(getStatus)\n\n  const dispatch = useAppDispatch()\n\n  const sendMessageHandler = (\n    values: ChatMessageFormValuesType,\n    {\n      resetForm,\n      setSubmitting,\n    }: {\n      resetForm: (values: object) => void\n      setSubmitting: (isSubmitting: boolean) => void\n    }\n  ) => {\n    if (!values.chat_message_form__text) return\n    setTimeout(() => {\n      dispatch(\n        sendMessage(values.chat_message_form__text) as AsyncThunkAction<\n          void,\n          string,\n          {}\n        > &\n          AnyAction\n      )\n      resetForm({})\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <Formik\n      initialValues={{ chat_message_form__text: '' }}\n      validate={formValidatorChat}\n      onSubmit={sendMessageHandler}\n    >\n      {({ resetForm, isSubmitting, handleChange }) => (\n        <Form className='chat_message_form__inner'>\n          <Field\n            name='chat_message_form__text'\n            type='text'\n            onChange={handleChange}\n            placeholder='Enter your message...'\n            className='chat-message-form__textarea'\n          />\n\n          <ErrorMessage\n            name='chat_message_form__text'\n            component='div'\n            className='_error'\n          />\n\n          <button\n            type='submit'\n            disabled={status !== 'ready' || isSubmitting}\n            className='chat-message-form__btn btn _hover'\n          >\n            Send\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n})\n","import { FC, memo } from 'react'\n\nimport { ChatMessageType } from '../../../../../API/chatAPI'\n\nimport UserAvatar from '../../../../common/UserAvatar/UserAvatar'\n\nimport './ChatMessage.css'\n\nexport const ChatMessage: FC<{ message: ChatMessageType }> = memo(\n  ({ message: { photo, userName, message } }) => {\n    return (\n      <div className='chat-message__container'>\n        <UserAvatar avatar={photo} />\n\n        <div className='chat-message__message__inner'>\n          <div className='chat-message__user-name'>{userName}</div>\n          <div className='chat-message__message-text'>{message}</div>\n        </div>\n      </div>\n    )\n  }\n)\n","import { FC, memo, useEffect, useRef, useState } from 'react'\n\nimport { useAppSelector } from '../../../../types/typedDispatch&Selector.types'\n\nimport { getChatMessages } from '../../../../redux/slices/chat-slice/chatSelectors'\n\nimport { ChatMessage } from './ChatMessage/ChatMessage'\n\nimport './ChatMessages.css'\n\nexport const ChatMessages: FC = memo(() => {\n  const messages = useAppSelector(getChatMessages)\n  const messageAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    /* prettier-ignore */\n    Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight\n    ) < 300\n      ? !isAutoScroll && setIsAutoScroll(true)\n      : isAutoScroll && setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      const scrollToNewMessage = () =>\n        messageAnchorRef.current?.scrollIntoView({\n          block: 'end',\n          behavior: 'smooth',\n        })\n\n      setTimeout(scrollToNewMessage, 300)\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <div className='chat-messages-screen__container' onScroll={onScrollHandler}>\n      {messages.map((m, index) => (\n        <ChatMessage message={m} key={index} />\n      ))}\n      <div ref={messageAnchorRef}></div>\n    </div>\n  )\n})\n","import { FC, useEffect } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\n\nimport {\n  useAppDispatch,\n  useAppSelector,\n} from '../../types/typedDispatch&Selector.types'\n\nimport {\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../redux/slices/chat-slice/chatAsyncActions'\n\nimport { getStatus } from '../../redux/slices/chat-slice/chatSelectors'\n\nimport { ChatMessageForm } from './Messages&Form/ChatMessageForm/ChatMessageForm'\nimport { ChatMessages } from './Messages&Form/ChatMessages/ChatMessages'\n\nimport './ChatPage.css'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\n\nconst ChatPage: FC = () => {\n  const status = useAppSelector(getStatus)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(\n      startMessagesListening() as AsyncThunkAction<void, void, {}> & AnyAction\n    )\n\n    return () => {\n      dispatch(\n        stopMessagesListening() as AsyncThunkAction<void, void, {}> & AnyAction\n      )\n    }\n  }, [])\n\n  return (\n    <main className='chat__container'>\n      <h2 className='main-page__h2'>CHAT</h2>\n\n      {status === 'error' && (\n        <div>Some error occured. Please refresh the page.</div>\n      )}\n\n      <div className='chat__inner'>\n        <ChatMessages />\n        <ChatMessageForm />\n      </div>\n    </main>\n  )\n}\n\nexport default withAuthReNavigate(ChatPage)\n"],"names":["ws","subscribers","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","message","send","_newMessageHandler","newMessageHandlerCreator","dispatch","messages","messagesReceived","_newStatusHandler","newStatusHandlerCreator","statusChanged","startMessagesListening","createAsyncThunk","_","stopMessagesListening","sendMessage","getChatMessages","state","chat","getStatus","ChatMessageForm","memo","useAppSelector","useAppDispatch","initialValues","chat_message_form__text","validate","formValidatorChat","onSubmit","values","resetForm","setSubmitting","isSubmitting","handleChange","className","name","type","onChange","placeholder","component","disabled","ChatMessage","photo","userName","UserAvatar","avatar","ChatMessages","messageAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","block","behavior","onScroll","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","withAuthReNavigate"],"sourceRoot":""}