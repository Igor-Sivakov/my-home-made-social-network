{"version":3,"file":"static/js/438.03ef20f6.chunk.js","mappings":"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","sources":["redux/selectors/usersSelectors.ts","componets/Users/UsersSearchForm/UsersSearchForm.tsx","componets/Users/UserProfile/UserProfile.tsx","componets/common/Pagination/Pagination.tsx","componets/Users/Users.tsx","componets/Users/UsersPage.tsx"],"sourcesContent":["//import { createSelector } from 'reselect';\n\nimport { AppStateType } from \"../redux-store\"\n\nexport const getUsers = (state: AppStateType) => {\n  return state.usersPage.usersData\n}\n\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n  return state.usersPage.totalUsersCount\n}\n\nexport const getcurrentPage = (state: AppStateType) => {\n  return state.usersPage.setCurrentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n  return state.usersPage.filter\n}\n\n// example hard selector created by reselect\n/* export const getUsersSuperSelector = createSelector(\n  getUsers,\n  getIsFetching,\n  (users, isFetching) => {\n    return users.filter((u) => true);\n  }\n);\n */\n","import { FC, memo } from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { getUsersFilter } from '../../../redux/selectors/usersSelectors'\nimport { useAppSelector, UsersFilterType } from '../../../Types/Types'\nimport './UsersSearchForm.css'\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {}\n  return errors\n}\n\ntype FormType = {\n  term: string\n  friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n  onFilterChanged: (filter: UsersFilterType) => void\n}\n\nconst UsersSearchForm: FC<PropsType> = memo((props) => {\n  const filterS = useAppSelector(getUsersFilter)\n\n  const submit = (\n    values: FormType,\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\n  ) => {\n    const filter: UsersFilterType = {\n      term: values.term,\n      friend:\n        values.friend === 'null'\n          ? null\n          : values.friend === 'true'\n          ? true\n          : false,\n    }\n    setTimeout(() => {\n      props.onFilterChanged(filter)\n      setSubmitting(false)\n    }, 400)\n  }\n\n  return (\n    <section className='find-friends__search-form__container'>\n      <Formik\n        enableReinitialize\n        initialValues={\n          { term: filterS.term, friend: String(filterS.friend) } as FormType\n        }\n        validate={usersSearchFormValidate}\n        onSubmit={submit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Field\n              className='find-friends__search-form__text-input'\n              type='text'\n              placeholder='find users by name...'\n              name='term'\n            />\n            <Field\n              className='find-friends__search-form__select'\n              name='friend'\n              as='select'\n            >\n              <option value='null'>All</option>\n              <option value='true'>Only followed</option>\n              <option value='false'>Only unfollowed</option>\n            </Field>\n            <button\n              className='find-friends__search-form__btn btn _hover'\n              type='submit'\n              disabled={isSubmitting}\n            >\n              Find\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </section>\n  )\n})\n\nexport default UsersSearchForm\n","import { FC, memo } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport userAvatar from '../../../img/userAvatar.jpeg'\nimport { UserDataType } from '../../../Types/Types'\nimport './UserProfile.css'\n\ntype PropsType = {\n  user: UserDataType\n  followingInProgress: number[]\n  follow: (userId: number) => void\n  unfollow: (userId: number) => void\n}\n\nconst UserProfile: FC<PropsType> = memo(\n  ({\n    user: { id, photos, followed, name, status },\n    followingInProgress,\n    unfollow,\n    follow,\n  }) => {\n    return (\n      <section className='find-friends__profile__container'>\n        <div className='find-friends__profile__inner'>\n          <div className='find-friends__profile__img-name__wrapper'>\n            <NavLink className='' to={'/Profile/' + id}>\n              <img\n                src={photos.small != null ? photos.small : userAvatar}\n                className='find-friends__profile__img'\n                alt='avatar'\n              />\n            </NavLink>\n            <div>\n              <NavLink className='' to={'/Profile/' + id}>\n                <p className='find-friends__profile__name'>{name}</p>\n              </NavLink>\n              <p className='find-friends__profile__status'>\n                {status != null\n                  ? status\n                  : 'Hi guys! Tomorrow I will be boarding, who is with me?'}\n              </p>\n            </div>\n          </div>\n\n          <div>\n            {followed ? (\n              <button\n                disabled={followingInProgress.some((iD) => iD === id)}\n                onClick={() => {\n                  unfollow(id)\n                }}\n                className='find-friends__profile__add-btn btn _hover'\n              >\n                Unfollow\n              </button>\n            ) : (\n              <button\n                disabled={followingInProgress.some((iD) => iD === id)}\n                onClick={() => {\n                  follow(id)\n                }}\n                className='find-friends__profile__add-btn btn _hover'\n              >\n                Follow\n              </button>\n            )}\n          </div>\n        </div>\n      </section>\n    )\n  }\n)\n\nexport default UserProfile\n","import { FC, memo } from 'react'\nimport './Pagination.css'\n\ntype PropsType = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  halfPortionSize?: number\n  onPageChanged: (page: number) => void\n}\n\nconst Pagination: FC<PropsType> = memo(\n  ({\n    totalItemsCount,\n    pageSize,\n    currentPage,\n    onPageChanged,\n    halfPortionSize = 5,\n  }) => {\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages: number[] = []\n\n    for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i)\n    }\n\n    let curP = currentPage\n    let curPF = curP - halfPortionSize < 0 ? 0 : curP - halfPortionSize\n    let curPL = curP + halfPortionSize\n    let slicedPages = pages.slice(curPF, curPL)\n\n    return (\n      <div className='pagination__container'>\n        {slicedPages.map((page) => {\n          return (\n            <div className='pagination__page' key={page}>\n              <span\n                key={page}\n                className={\n                  currentPage === page ? 'pagination__selected-page _hover' : ''\n                }\n                onClick={(e) => {\n                  onPageChanged(page)\n                }}\n              >\n                {page}\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\n\nexport default Pagination\n","import { FC, memo } from 'react'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\nimport {\n  getFollow,\n  getUnfollow,\n  requestUsers,\n} from '../../redux/reducers/usersReduser'\nimport {\n  getFollowingInProgress,\n  getTotalUsersCount,\n  getUsers,\n} from '../../redux/selectors/usersSelectors'\nimport {\n  useAppDispatch,\n  useAppSelector,\n  UserDataType,\n  UsersFilterType,\n} from '../../Types/Types'\nimport UsersSearchForm from './UsersSearchForm/UsersSearchForm'\nimport UserProfile from './UserProfile/UserProfile'\nimport Pagination from '../common/Pagination/Pagination'\nimport './Users.css'\n\ntype PropsType = {\n  currentPage: number\n  pageSize: number\n  filter: UsersFilterType\n}\n\nconst Users: FC<PropsType> = memo(({ currentPage, pageSize, filter }) => {\n  const users = useAppSelector(getUsers)\n  const totalUsersCount = useAppSelector(getTotalUsersCount)\n  const followingInProgress = useAppSelector(getFollowingInProgress)\n\n  const dispatch = useAppDispatch()\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(\n      requestUsers({\n        actualPage: pageNumber,\n        pageSize,\n        actualFilter: filter,\n      }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n  }\n\n  const onFilterChanged = (filter: UsersFilterType) => {\n    dispatch(\n      requestUsers({\n        actualPage: 1,\n        pageSize,\n        actualFilter: filter,\n      }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n  }\n\n  const follow = (userId: number) => {\n    dispatch(\n      getFollow(userId) as AsyncThunkAction<void, number, {}> & AnyAction\n    )\n  }\n\n  const unfollow = (userId: number) => {\n    dispatch(\n      getUnfollow(userId) as AsyncThunkAction<void, number, {}> & AnyAction\n    )\n  }\n\n  let userProfileElement = users.map((profile: UserDataType) => (\n    <UserProfile\n      user={profile}\n      key={profile.id}\n      follow={follow}\n      unfollow={unfollow}\n      followingInProgress={followingInProgress}\n    />\n  ))\n\n  return (\n    <main className='find-friends__container'>\n      <h2 className='main-page__h2'>USERS</h2>\n      <div className='find-friends__wrapper'>\n        <section className='find-friends__inner'>\n          <UsersSearchForm onFilterChanged={onFilterChanged} />\n          <div className='find-friends__item__inner'>{userProfileElement}</div>\n          <button\n            className='find-friends__next-page-btn btn _hover'\n            onClick={(e) => {\n              onPageChanged(currentPage + 1)\n            }}\n          >\n            Show more\n          </button>\n          <Pagination\n            totalItemsCount={totalUsersCount}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChanged={onPageChanged}\n          />\n        </section>\n      </div>\n    </main>\n  )\n})\n\nexport default Users\n","import { FC, memo, useEffect } from 'react'\nimport { useSearchParams } from 'react-router-dom'\nimport { AnyAction, AsyncThunkAction } from '@reduxjs/toolkit'\nimport { requestUsers } from '../../redux/reducers/usersReduser'\nimport {\n  getcurrentPage,\n  getIsFetching,\n  getPageSize,\n  getUsersFilter,\n} from '../../redux/selectors/usersSelectors'\nimport { withAuthReNavigate } from '../HOC/withAuthReNavigate'\nimport {\n  useAppDispatch,\n  useAppSelector,\n  UsersFilterType,\n} from '../../Types/Types'\nimport Preloader from '../common/preloader/preloader'\nimport Users from './Users'\n\ntype QueryParamsType = {\n  term?: string\n  friend?: string\n  page?: string\n}\n\nconst UserPage: FC = memo(() => {\n  const isFetching = useAppSelector(getIsFetching)\n  const filter = useAppSelector(getUsersFilter)\n  const pageSize = useAppSelector(getPageSize)\n  const currentPage = useAppSelector(getcurrentPage)\n\n  const dispatch = useAppDispatch()\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  useEffect(() => {\n    const pageQuery = searchParams.get('page')\n    const termQuery = searchParams.get('term') || ''\n    const friendQuery = searchParams.get('friend')\n\n    let actualPage = currentPage\n    let actualFilter = filter\n\n    if (!!pageQuery) actualPage = Number(pageQuery)\n\n    if (!!termQuery)\n      actualFilter = { ...actualFilter, term: termQuery as string }\n\n    if (!!friendQuery)\n      actualFilter = {\n        ...actualFilter,\n        friend:\n          friendQuery === 'null' ? null : friendQuery === 'true' ? true : false,\n      }\n\n    dispatch(\n      requestUsers({ actualPage, pageSize, actualFilter }) as AsyncThunkAction<\n        void,\n        { actualPage: number; pageSize: number; actualFilter: UsersFilterType },\n        {}\n      > &\n        AnyAction\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, pageSize, searchParams])\n\n  useEffect(() => {\n    const query: QueryParamsType = {}\n    if (!!filter.term) query.term = filter.term\n    if (filter.friend !== null) query.friend = String(filter.friend)\n    if (currentPage !== 1) query.page = String(currentPage)\n\n    setSearchParams(query)\n  }, [filter, currentPage, setSearchParams])\n\n  if (isFetching) return <Preloader />\n  return <Users currentPage={currentPage} pageSize={pageSize} filter={filter} />\n})\n\nexport default withAuthReNavigate(UserPage)\n"],"names":["getUsers","state","usersPage","usersData","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getcurrentPage","setCurrentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","filter","usersSearchFormValidate","values","memo","props","filterS","useAppSelector","className","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","setTimeout","onFilterChanged","isSubmitting","type","placeholder","name","as","value","disabled","user","id","photos","followed","status","unfollow","follow","to","src","small","userAvatar","alt","some","iD","onClick","totalItemsCount","currentPage","onPageChanged","halfPortionSize","pagesCount","Math","ceil","pages","i","push","curPF","curPL","slicedPages","slice","map","page","e","users","dispatch","useAppDispatch","pageNumber","requestUsers","actualPage","actualFilter","userId","getFollow","getUnfollow","userProfileElement","profile","UserPage","useSearchParams","searchParams","setSearchParams","useEffect","pageQuery","get","termQuery","friendQuery","Number","query","withAuthReNavigate"],"sourceRoot":""}